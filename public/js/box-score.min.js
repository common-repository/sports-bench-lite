"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var a=0,t=function(){};return{s:t,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){i=!0,n=e},f:function(){try{o||null==r.return||r.return()}finally{if(i)throw n}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,a=new Array(t);r<t;r++)a[r]=e[r];return a}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}var BoxScoreTabController=function(){function t(e){_classCallCheck(this,t),this.container=document.querySelector(e),this.tablist=this.container.querySelector("[role=tablist]"),this.tabs=this.container.querySelectorAll("[role=tab]"),this.tabpanels=this.container.querySelectorAll("[role=tabpanel]"),this.activeTab=this.container.querySelector("[role=tab][aria-selected=true]"),console.log(this.activeTab),this._addEventListeners()}return _createClass(t,[{key:"_addEventListeners",value:function(){var e,r=this,t=_createForOfIteratorHelper(this.tabs);try{for(t.s();!(e=t.n()).done;)!function(){var t=e.value;t.addEventListener("click",function(e){e.preventDefault(),r.setActiveTab(t.getAttribute("aria-controls"))}),t.addEventListener("keyup",function(e){13!=e.keyCode&&32!=e.keyCode||(e.preventDefault(),r.setActiveTab(t.getAttribute("aria-controls")))})}()}catch(e){t.e(e)}finally{t.f()}this.tablist.addEventListener("keyup",function(e){switch(e.keyCode){case 35:e.preventDefault(),r.setActiveTab(r.tabs[r.tabs.length-1].getAttribute("aria-controls"));break;case 36:e.preventDefault(),r.setActiveTab(r.tabs[0].getAttribute("aria-controls"));break;case 37:e.preventDefault();var t=0<=(t=_toConsumableArray(r.tabs).indexOf(r.activeTab)-1)?t:r.tabs.length-1;r.setActiveTab(r.tabs[t].getAttribute("aria-controls"));break;case 39:e.preventDefault();t=(t=_toConsumableArray(r.tabs).indexOf(r.activeTab)+1)<r.tabs.length?t:0;r.setActiveTab(r.tabs[t].getAttribute("aria-controls"))}})}},{key:"setActiveTab",value:function(e){var t,r=_createForOfIteratorHelper(this.tabs);try{for(r.s();!(t=r.n()).done;){var a=t.value;a.getAttribute("aria-controls")==e?(a.setAttribute("aria-selected","true"),a.focus(),this.activeTab=a):a.setAttribute("aria-selected","false")}}catch(e){r.e(e)}finally{r.f()}var n,o=_createForOfIteratorHelper(this.tabpanels);try{for(o.s();!(n=o.n()).done;){var i=n.value;i.getAttribute("id")==e?i.setAttribute("aria-expanded","true"):i.setAttribute("aria-expanded","false")}}catch(e){o.e(e)}finally{o.f()}}}]),t}(),boxScoreTabController=new BoxScoreTabController("#box-score-events");jQuery(function(t){var r=[],e=function(e){for(var t,r=window.location.search.substring(1).split("&"),a=0;a<r.length;a++)if((t=r[a].split("="))[0]===e)return void 0===_typeof(t[1])||decodeURIComponent(t[1]);return!1}("game_id");window.setInterval(function(){t.post({url:sbboxscore.url,data:{nonce:sbboxscore.nonce,action:"sports_bench_box_score_ajax",game_id:e,event_ids:r},success:function(e){r=e.data[1],0<e.data[0].length&&t(e.data[0]).insertBefore(".game-events tbody tr:first").fadeIn("fast"),"baseball"===sbboxscore.sport&&0<e.data[2].length&&t(e.data[2]).insertBefore(".game-events.runs-scored tbody tr:first").fadeIn("fast")},fail:function(e){console.log(e)}})},6e4),t(".game-events:not(.runs-scored) .event-id").each(function(){var e=t(this).text();r.push(e)})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,