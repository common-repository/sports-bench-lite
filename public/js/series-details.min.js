"use strict";function ownKeys(t,e){var n,r=Object.keys(t);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(t),e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)),r}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(Object(n),!0).forEach(function(e){_defineProperty(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var loadConfig=function(){var n={};return{set:function(e,t){n[e]=t},get:function(e){return n[e]},remove:function(e){return n[e]}}},DATA_HASH_ID="data-hash-id",pluginConfig=loadConfig(),findById=function(e,t){return document.querySelector("#".concat(e,"[").concat(DATA_HASH_ID,'="').concat(t,'"]'))},addClass=function(e,t){e.classList?e.classList.add(t):e.className+=" "+t},removeClass=function(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")},hasClass=function(e,t){return e.classList?e.classList.contains(t):new RegExp("(^| )"+t+"( |$)","gi").test(e.className)},setAttributes=function(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})},triggerEvent=function(e,t){var n;e.fireEvent?e.fireEvent("on"+t):((n=document.createEvent("Events")).initEvent(t,!0,!1),e.dispatchEvent(n))},searchParentHashId=function(e,t){for(var n=!1,r=e;1===r.nodeType&&r&&!1===n;)!0===r.hasAttribute(t)?n=!0:r=r.parentNode;return!0===n?r.getAttribute(t):""},searchParent=function(e,t,n){for(var r=!1,i=e;i&&!1===r;)!0===hasClass(i,t)&&i.getAttribute(DATA_HASH_ID)===n?r=!0:i=i.parentNode;return!0===r?i.getAttribute("id"):""},plugin=function(){var s=_objectSpread({HIDESHOW_EXPAND:"js-expandmore",HIDESHOW_BUTTON_EXPAND:"js-expandmore-button",HIDESHOW_BUTTON_EXPAND_STYLE:"expandmore__button",HIDESHOW_BUTTON_LABEL_ID:"label_expand_",DATA_PREFIX_CLASS:"data-hideshow-prefix-class",HIDESHOW_BUTTON_EMPTY_ELEMENT_SYMBOL:"expandmore__symbol",HIDESHOW_BUTTON_EMPTY_ELEMENT_TAG:"span",ATTR_HIDESHOW_BUTTON_EMPTY_ELEMENT:"aria-hidden",HIDESHOW_TO_EXPAND_ID:"expand_",HIDESHOW_TO_EXPAND_STYLE:"expandmore__to_expand",ATTR_CONTROL:"data-controls",ATTR_EXPANDED:"aria-expanded",ATTR_LABELLEDBY:"data-labelledby",ATTR_HIDDEN:"data-hidden",IS_OPENED_CLASS:"is-opened",DISPLAY_FIRST_LOAD:"js-first_load",DISPLAY_FIRST_LOAD_DELAY:"1500"},0<arguments.length&&void 0!==arguments[0]?arguments[0]:{}),E=Math.random().toString(32).slice(2,12);pluginConfig.set(E,s);return{attach:function(e){!function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:document;return[].slice.call(e.querySelectorAll("."+s.HIDESHOW_EXPAND))}(e).forEach(function(e){var t,n=Math.random().toString(32).slice(2,12),r=!0===e.hasAttribute(s.DATA_PREFIX_CLASS)?e.getAttribute(s.DATA_PREFIX_CLASS)+"-":"",i=e.nextElementSibling,a=e.innerHTML,_=document.createElement("BUTTON"),o=document.createElement(s.HIDESHOW_BUTTON_EMPTY_ELEMENT_TAG);e.setAttribute(DATA_HASH_ID,E),addClass(o,r+s.HIDESHOW_BUTTON_EMPTY_ELEMENT_SYMBOL),setAttributes(o,(_defineProperty(t={},s.ATTR_HIDESHOW_BUTTON_EMPTY_ELEMENT,!0),_defineProperty(t,DATA_HASH_ID,E),t)),e.innerHTML="",addClass(_,r+s.HIDESHOW_BUTTON_EXPAND_STYLE),addClass(_,s.HIDESHOW_BUTTON_EXPAND),setAttributes(_,(_defineProperty(t={},s.ATTR_CONTROL,s.HIDESHOW_TO_EXPAND_ID+n),_defineProperty(t,s.ATTR_EXPANDED,"false"),_defineProperty(t,"id",s.HIDESHOW_BUTTON_LABEL_ID+n),_defineProperty(t,"type","button"),_defineProperty(t,DATA_HASH_ID,E),t)),_.innerHTML=a,e.appendChild(_),_.insertBefore(o,_.firstChild),setAttributes(i,(_defineProperty(o={},s.ATTR_LABELLEDBY,s.HIDESHOW_BUTTON_LABEL_ID+n),_defineProperty(o,s.ATTR_HIDDEN,"true"),_defineProperty(o,"id",s.HIDESHOW_TO_EXPAND_ID+n),_defineProperty(o,DATA_HASH_ID,E),o)),addClass(i,r+s.HIDESHOW_TO_EXPAND_STYLE),!0===hasClass(i,s.DISPLAY_FIRST_LOAD)&&setTimeout(function(){removeClass(i,s.DISPLAY_FIRST_LOAD)},s.DISPLAY_FIRST_LOAD_DELAY),!0===hasClass(i,s.IS_OPENED_CLASS)&&(addClass(_,s.IS_OPENED_CLASS),_.setAttribute(s.ATTR_EXPANDED,"true"),removeClass(i,s.IS_OPENED_CLASS),i.removeAttribute(s.ATTR_HIDDEN))})}}},main=function(){return["click","keydown"].forEach(function(a){document.body.addEventListener(a,function(e){var t=searchParentHashId(e.target,DATA_HASH_ID);if(""!==t){var n=pluginConfig.get(t),r=searchParent(e.target,n.HIDESHOW_BUTTON_EXPAND,t);if(""!==r&&"click"===a&&(r=findById(r,t),i=findById(r.getAttribute(n.ATTR_CONTROL),t),"false"===r.getAttribute(n.ATTR_EXPANDED)?(r.setAttribute(n.ATTR_EXPANDED,!0),addClass(r,n.IS_OPENED_CLASS),i.removeAttribute(n.ATTR_HIDDEN)):(r.setAttribute(n.ATTR_EXPANDED,!1),removeClass(r,n.IS_OPENED_CLASS),i.setAttribute(n.ATTR_HIDDEN,!0))),!0===hasClass(e.target,n.HIDESHOW_EXPAND)){var i=e.target,n=i.querySelector("."+n.HIDESHOW_BUTTON_EXPAND);if(i!=n)return"click"!==a&&("keydown"!==a||13!==e.keyCode&&32!==e.keyCode)?void 0:(triggerEvent(n,"click"),!1)}}},!0)}),plugin};window.van11yAccessibleHideShowAria=main();var onLoad=function e(){window.van11yAccessibleHideShowAria().attach(),document.removeEventListener("DOMContentLoaded",e)};document.addEventListener("DOMContentLoaded",onLoad);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,