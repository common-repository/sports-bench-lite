"use strict";jQuery(function(y){var _=[];y(".player-name").click(function(){console.log("clicked");var s=y("#sports-bench-player-id").text();console.log(s);var e,a=y(this).parent("tr"),o=y(this).parents("table"),n=y(this).text().split("|"),t=n[0].trim(),l=n[1].trim().toLocaleLowerCase().replace(/\s+/g,"-"),r=_.length;if(y(o).hasClass("baseball"))if(e=y(o).hasClass("batting")?"batting":"pitching",0<r){var c=!1;for(i=0;i<r;i++)_[i][0]==t&&_[i][1]==l&&_[i][2]==e&&(c=!0,f=i);1==c?(y(".season-"+t).map(function(){y(this).hide(500,function(){y(this).html("")})}),_.splice(f,1)):(w="undefined"!=s&&s!=sbloadseasons.player?s:sbloadseasons.player,d={action:"sports_bench_load_seasons",nonce:sbloadseasons.nonce,season:t,team:l,stat_group:e,player:w},y.post(sbloadseasons.url,d,function(s){s.success&&(a.after(s.data),jQuery(".new-stats-row").hide(0).show(1e3))}).fail(function(s,e,a){}),_.push(u=[t,l,e]))}else{w="undefined"!=s&&s!=sbloadseasons.player?s:sbloadseasons.player;var d={action:"sports_bench_load_seasons",nonce:sbloadseasons.nonce,season:t,team:l,stat_group:e,player:w};y.post(sbloadseasons.url,d,function(s){s.success&&(a.after(s.data),jQuery(".new-stats-row").hide(0).show(1e3))}).fail(function(s,e,a){});var u=[t,l,e];_.push(u)}else if(y(o).hasClass("hockey"))if(e=y(o).hasClass("normal")?"normal":"goalie",0<r){for(var c=!1,p=0;p<r;p++)_[p][0]==t&&_[p][1]==l&&_[p][2]==e&&(c=!0,f=p);1==c?(a.nextAll(".new-stats-row").hide(500,function(){a.nextAll(".new-stats-row").html("")}),_.splice(f,1)):(w="undefined"!=s&&s!=sbloadseasons.player?s:sbloadseasons.player,d={action:"sports_bench_load_seasons",nonce:sbloadseasons.nonce,season:t,team:l,stat_group:e,player:w},y.post(sbloadseasons.url,d,function(s){s.success&&(a.after(s.data),jQuery(".new-stats-row").hide(0).show(1e3))}).fail(function(s,e,a){}),_.push(u=[t,l,e]))}else{w="undefined"!=s&&s!=sbloadseasons.player?s:sbloadseasons.player;d={action:"sports_bench_load_seasons",nonce:sbloadseasons.nonce,season:t,team:l,stat_group:e,player:w};y.post(sbloadseasons.url,d,function(s){s.success&&(a.after(s.data),jQuery(".new-stats-row").hide(0).show(1e3))}).fail(function(s,e,a){});u=[t,l,e];_.push(u)}else if(y(o).hasClass("football"))if(e=y(o).hasClass("passing")?"passing":y(o).hasClass("rushing")?"rushing":y(o).hasClass("receiving")?"receiving":y(o).hasClass("defense")?"defense":y(o).hasClass("kicking")?"kicking":"returns",0<r){for(var c=!1,h=0;h<r;h++)_[h][0]==t&&_[h][1]==l&&_[h][2]==e&&(c=!0,f=h);1==c?(a.nextAll(".new-stats-row").hide(500,function(){a.nextAll(".new-stats-row").html("")}),_.splice(f,1)):(w="undefined"!=s&&s!=sbloadseasons.player?s:sbloadseasons.player,d={action:"sports_bench_load_seasons",nonce:sbloadseasons.nonce,season:t,team:l,stat_group:e,player:w},y.post(sbloadseasons.url,d,function(s){s.success&&(a.after(s.data),jQuery(".new-stats-row").hide(0).show(1e3))}).fail(function(s,e,a){}),_.push(u=[t,l,e]))}else{w="undefined"!=s&&s!=sbloadseasons.player?s:sbloadseasons.player;d={action:"sports_bench_load_seasons",nonce:sbloadseasons.nonce,season:t,team:l,stat_group:e,player:w};y.post(sbloadseasons.url,d,function(s){s.success&&(a.after(s.data),jQuery(".new-stats-row").hide(0).show(1e3))}).fail(function(s,e,a){});u=[t,l,e];_.push(u)}else if(0<r){for(var f,c=!1,b=0;b<r;b++)_[b][0]==t&&_[b][1]==l&&(c=!0,f=b);1==c?(a.nextAll(".new-stats-row").hide(500,function(){a.nextAll(".new-stats-row").html("")}),_.splice(f,1)):(w=""!=s&&s!=sbloadseasons.player?s:sbloadseasons.player,d={action:"sports_bench_load_seasons",nonce:sbloadseasons.nonce,season:t,team:l,player:w},y.post(sbloadseasons.url,d,function(s){s.success&&(console.log(s),a.after(s.data),jQuery(".new-stats-row").hide(0).show(1e3))}).fail(function(s,e,a){}),_.push(u=[t,l]))}else{var w;w=""!=s&&s!=sbloadseasons.player?s:sbloadseasons.player;d={action:"sports_bench_load_seasons",nonce:sbloadseasons.nonce,season:t,team:l,player:w};y.post(sbloadseasons.url,d,function(s){s.success&&(console.log(s),a.after(s.data),jQuery(".new-stats-row").hide(0).show(1e3))}).fail(function(s,e,a){});u=[t,l];_.push(u)}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,